package id.idtrust.signing.core.pdf;import id.idtrust.signing.util.Description;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import java.awt.*;import java.awt.font.FontRenderContext;import java.awt.geom.Rectangle2D;import java.awt.image.BufferedImage;import java.io.ByteArrayOutputStream;import java.io.File;import java.net.URLEncoder;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.EnumMap;import java.util.List;import java.util.Map;import javax.imageio.ImageIO;import static java.lang.Math.round;public class QRCode extends Description {    private static final Logger logger = LogManager.getLogger();    final static int sizeText = 30;    public final static byte QR_FOR_SEAL = 1;    public final static byte QR_FOR_SIGN = 0;    Description ds = new Description();//    public void generateQRCode(String doc_id, String logoPath, String nama, Date dateSign, String filettd, String fileOutput, String qrText, byte signature, boolean withSignature, boolean qrOnly) throws Exception {//        String docs = AESEncryption.encrypt(String.valueOf(doc_id));//        String link = qrText == null ? LINK_DOC_STATUS + URLEncoder.encode(docs, "UTF-8") : qrText;//        generateQRCodeImageWithLogo(link, logoPath, nama, dateSign, filettd, fileOutput, signature, withSignature, qrOnly);//    }    public void generateImageSignNoQr(String nama, String filettd, String fileOutput, Date dateSign) throws Exception {        try{            logger.info("[" + ds.VERSION + "]-[SIGNING/INFO] : Generate QR");            logger.debug("[" + ds.VERSION + "]-[SIGNING/INFO] : Nama : " + nama);            logger.debug("[" + ds.VERSION + "]-[SIGNING/INFO] : File ttd : " + filettd);            logger.debug("[" + ds.VERSION + "]-[SIGNING/INFO] : File output : " + fileOutput);            // Calculate the delta height and width between QR code and logo            BufferedImage ttdImage = ImageIO.read(new File(filettd));            int d_width = 1150;            int d_height = 750;            BufferedImage combined = new BufferedImage(d_width, d_height, BufferedImage.TYPE_INT_ARGB);            Graphics2D g2 = (Graphics2D) combined.getGraphics();            Dimension newimgSize = getScaledDimension(new Dimension(ttdImage.getWidth(), ttdImage.getHeight()), new Dimension(d_width, d_height));            System.out.println(d_width);            System.out.println(d_height);            System.out.println(ttdImage.getWidth());            System.out.println(ttdImage.getHeight());            System.out.println(newimgSize.width);            System.out.println(newimgSize.height);            int x = d_width - newimgSize.width;            int y = d_height - newimgSize.height;            g2.drawImage(ttdImage, x, y, newimgSize.width, newimgSize.height, null);//            int hText = 45;//            int centerSpace = 32;//            int pText = 55;////            RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING,//                            RenderingHints.VALUE_ANTIALIAS_ON);//////            rh.put(RenderingHints.KEY_RENDERING,//                    RenderingHints.VALUE_RENDER_QUALITY);//////            g2.setRenderingHints(rh);////            g2.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 58));//            g2.setPaint(Color.BLACK);////            String devel = "devel";//            String devel = ds.devel;//            if (devel != null && devel.equals("devel")) {//                g2.drawString("[TESTING ONLY]", centerSpace + d_width/2, hText);//                hText += 60;//            }//////            FontMetrics metrics = g2.getFontMetrics(new Font(Font.SANS_SERIF, Font.PLAIN, 50));////            g2.drawString("Ditandatangani", centerSpace + d_width/2 , hText);////            hText += 55;////            g2.drawString("Elektronik:", centerSpace +d_width/2, hText);////            logger.debug("[" + ds.VERSION + "]-[SIGNING/INFO] : NAMA : " + nama);//            List<String> namaLst = getNamaListNoQr(nama);//            for (String aa : namaLst) {//                logger.debug("[" + ds.VERSION + "]-[SIGNING/INFO] : " + aa);//            }////            int i = 0;//            for (i = 0; i < namaLst.size(); i++) {//                if (i >= 3) break;//                g2.drawString(namaLst.get(i), centerSpace + d_width/2, hText);//                hText += 58;//            }////            SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");//            SimpleDateFormat tm = new SimpleDateFormat("HH:mm:ss");//            g2.drawString(dt.format(dateSign), centerSpace + d_width/2, hText);//            pText += 55;//            hText += 58;//            g2.drawString(tm.format(dateSign)+ " WIB", centerSpace + d_width/2, hText);////            g2.setComposite(AlphaComposite.Clear);            ImageIO.write(combined, "png", new File(fileOutput));            logger.info("[" + ds.VERSION + "]-[SIGNING/INFO] : Process QR done");        } catch(Exception e)        {            logger.info("[" + ds.VERSION + "]-[SIGNING/INFO] : "+ e);            e.printStackTrace();            throw e;        }    }//    public void generateQRCodeImageWithLogo(String text, String filePath, String nama, Date dateSign, String filettd, String fileOutput, byte signature, boolean withSignature, boolean qrOnly) throws Exception {//        try {//            LogSystem.info("Text : " + text);//            LogSystem.info("Filepath : " + filePath);//            LogSystem.info("Nama : " + nama);//            LogSystem.info("Datesign : " + dateSign);//            LogSystem.info("File ttd : " + filettd);//            LogSystem.info("File output : " + fileOutput);////            Map<EncodeHintType, Object> hints = new EnumMap<EncodeHintType, Object>(EncodeHintType.class);//            hints.put(EncodeHintType.MARGIN, 2);//            hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);//            int version = 10;//            int lenText = text.length();//            if (lenText > 100) {//                version += ((lenText - 100) / 15) + 3;//            }//            if (text.length() > 300) {//                filePath = null;//            }//            LogSystem.info("version:" + version);//            LogSystem.info("text:" + lenText);//            hints.put(EncodeHintType.QR_VERSION, version);//////            QRCodeWriter writer = new QRCodeWriter();//            BitMatrix bitMatrix = null;//            ByteArrayOutputStream baos = new ByteArrayOutputStream();////            bitMatrix = writer.encode(text, BarcodeFormat.QR_CODE, 1000, 1000, hints);////            MatrixToImageConfig config = new MatrixToImageConfig(MatrixToImageConfig.BLACK, MatrixToImageConfig.WHITE);////            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix, config);////            // Calculate the delta height and width between QR code and logo////            File file2 = new File(filettd);//            BufferedImage ttdImage = ImageIO.read(file2);//////            BufferedImage combined = new BufferedImage(qrImage.getWidth(), qrImage.getHeight(),//                    BufferedImage.TYPE_INT_ARGB);//            Graphics2D g = (Graphics2D) combined.getGraphics();////			g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);//            g.setPaint(Color.WHITE);//            g.fillRect(0, 0, qrImage.getWidth(), qrImage.getHeight());//            g.drawImage(qrImage, null, 0, 0);//            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));//            BufferedImage logoImage = null;//            if (filePath != null) {//                logoImage = ImageIO.read(new File(filePath));//                int hLogo = 0;//                int h_Logo = logoImage.getHeight();//                int w_Logo = logoImage.getWidth();//                int imageSiz = 300;////                if (ttdImage.getHeight() <= imageSiz) {//                    hLogo = (imageSiz - logoImage.getHeight()) / 2;//                    h_Logo = logoImage.getHeight();//                    w_Logo = logoImage.getWidth();//                } else {//                    h_Logo = imageSiz;//                    w_Logo = (int) (logoImage.getWidth() * ((float) imageSiz / (float) logoImage.getHeight()));//////                }//                if (w_Logo > imageSiz) {//                    h_Logo = (int) (h_Logo * ((float) imageSiz / (float) w_Logo));//                    w_Logo = imageSiz;//                    hLogo = (imageSiz - h_Logo) / 2;//                }//////                Image resultingImage = logoImage.getScaledInstance(w_Logo, h_Logo, Image.SCALE_SMOOTH);//                int deltaHeight = qrImage.getHeight() - h_Logo;//                int deltaWidth = qrImage.getWidth() - w_Logo;//                int deltaHeight_bg = qrImage.getHeight() - imageSiz;//                int deltaWidth_bg = qrImage.getWidth() - imageSiz;//                LogSystem.info("deltaHeight :" + deltaHeight + ", deltaWidth :" + deltaWidth);//                g.drawImage(resultingImage, (int) Math.round(deltaWidth / 2), (int) Math.round(deltaHeight / 2), null);//            }////            if (signature == QR_FOR_SEAL) {//                ImageIO.write(combined, "png", new File(fileOutput));//                LogSystem.info("Seal QR has been created ");//                return;//            }//            int QRsize = 1000;//            int ttdSize = 450;//            int ttdSizeW = 850;//            int hTTD = 0;//            int h_ttd = ttdImage.getHeight();//            int w_ttd = ttdImage.getWidth();//            int hText = 510;////            h_ttd = ttdSize;//            w_ttd = (int) (ttdImage.getWidth() * ((float) ttdSize / (float) ttdImage.getHeight()));////            if (w_ttd > ttdSizeW) {//                h_ttd = (int) (h_ttd * ((float) ttdSizeW / (float) w_ttd));//                w_ttd = ttdSizeW;//                hTTD = (ttdSize - h_ttd) / 2;//            }////            if (withSignature && qrOnly)//            {//                ImageIO.write(combined, "png", new File(fileOutput));//                LogSystem.info("Only QR success generated");//                return;//            }////            int padding = 30;//            int imageWidth = QRsize + ttdSizeW + padding;//            BufferedImage combinedFinal = new BufferedImage(imageWidth, QRsize, BufferedImage.TYPE_INT_ARGB);//            Graphics2D g2 = (Graphics2D) combinedFinal.getGraphics();//            //			g2.setPaint(Color.WHITE);//            //		    g2.fillRect(0, 0, imageWidth, qrImage.getHeight());//            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);//            g2.drawImage(combined, 0, 0, QRsize, QRsize, null);////            Image ttdResize = ttdImage.getScaledInstance(w_ttd, h_ttd, Image.SCALE_SMOOTH);////            g2.drawImage(ttdResize, QRsize + padding, hTTD, w_ttd, h_ttd, null);//            if (!withSignature)//            {//                g2.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 58));//                g2.setPaint(Color.BLACK);//                int pText = 64;//                QRsize = QRsize + 30;////                String devel = ds.devel;//                if (devel != null && devel.equals("devel")) {//                    g2.drawString("[TESTING ONLY]", QRsize, hText);//                }//                hText += 64;////                g2.drawString("Ditandatangani elektronik:", QRsize, hText);//                LogSystem.info("NAMA : " + nama);//                List<String> namaLst = getNamaList(nama);//                for (String aa : namaLst) {//                    LogSystem.info(aa);//                }//                int i = 0;//                for (i = 0; i < namaLst.size(); i++) {//                    if (i >= 3) break;//                    g2.drawString(namaLst.get(i), QRsize, hText + pText);//                    pText += 64;//                }//////                SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");//                SimpleDateFormat tm = new SimpleDateFormat("HH:mm:ss");//                g2.drawString(dt.format(dateSign), QRsize, hText + pText);//                pText += 64;//                g2.drawString(tm.format(dateSign)+ " WIB", QRsize, hText + pText);//            }//////            ImageIO.write(combinedFinal, "png", new File(fileOutput));////            LogSystem.info("Process QR done");//        } catch (Exception e) {//            LogSystem.error(e.toString());//            e.printStackTrace();//            throw e;//        }//    }////    public void generateQRCodeImage2(String docid, String qrText, String filePath, String nama, Date dateSign, String filettd, String fileOutput, byte signature, boolean withSignature, boolean qrOnly) throws Exception {//        try {//            String docs = AESEncryption.encrypt(String.valueOf(docid));//            String text = qrText == null ? LINK_DOC_STATUS + URLEncoder.encode(docs, "UTF-8") : qrText;//            LogSystem.info("Text : " + text);//            LogSystem.info("Filepath : " + filePath);//            LogSystem.info("Nama : " + nama);//            LogSystem.info("Datesign : " + dateSign);//            LogSystem.info("File ttd : " + filettd);//            LogSystem.info("File output : " + fileOutput);////            Map<EncodeHintType, Object> hints = new EnumMap<EncodeHintType, Object>(EncodeHintType.class);//            hints.put(EncodeHintType.MARGIN, 2);//            hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);//            int version = 10;//            int lenText = text.length();//            if (lenText > 100) {//                version += ((lenText - 100) / 15) + 3;//            }//            if (text.length() > 300) {//                filePath = null;//            }//            LogSystem.info("version:" + version);//            LogSystem.info("text:" + lenText);//            hints.put(EncodeHintType.QR_VERSION, version);//////            QRCodeWriter writer = new QRCodeWriter();//            BitMatrix bitMatrix = null;//            ByteArrayOutputStream baos = new ByteArrayOutputStream();////            bitMatrix = writer.encode(text, BarcodeFormat.QR_CODE, 1000, 1000, hints);////            MatrixToImageConfig config = new MatrixToImageConfig(MatrixToImageConfig.BLACK, MatrixToImageConfig.WHITE);////            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(bitMatrix, config);////            // Calculate the delta height and width between QR code and logo////            File file2 = new File(filettd);//            BufferedImage ttdImage = ImageIO.read(file2);//////            BufferedImage combined = new BufferedImage(qrImage.getWidth(), qrImage.getHeight(),//                    BufferedImage.TYPE_INT_ARGB);//            Graphics2D g = (Graphics2D) combined.getGraphics();////			g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);//            g.setPaint(Color.WHITE);//            g.fillRect(0, 0, qrImage.getWidth(), qrImage.getHeight());//            g.drawImage(qrImage, null, 0, 0);//            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));//            BufferedImage logoImage = null;//            if (filePath != null) {//                logoImage = ImageIO.read(new File(filePath));//                int hLogo = 0;//                int h_Logo = logoImage.getHeight();//                int w_Logo = logoImage.getWidth();//                int imageSiz = 300;////                if (ttdImage.getHeight() <= imageSiz) {//                    hLogo = (imageSiz - logoImage.getHeight()) / 2;//                    h_Logo = logoImage.getHeight();//                    w_Logo = logoImage.getWidth();//                } else {//                    h_Logo = imageSiz;//                    w_Logo = (int) (logoImage.getWidth() * ((float) imageSiz / (float) logoImage.getHeight()));//////                }//                if (w_Logo > imageSiz) {//                    h_Logo = (int) (h_Logo * ((float) imageSiz / (float) w_Logo));//                    w_Logo = imageSiz;//                    hLogo = (imageSiz - h_Logo) / 2;//                }////                Image resultingImage = logoImage.getScaledInstance(w_Logo, h_Logo, Image.SCALE_SMOOTH);//                int deltaHeight = qrImage.getHeight() - h_Logo;//                int deltaWidth = qrImage.getWidth() - w_Logo;//                LogSystem.info("deltaHeight :" + deltaHeight + ", deltaWidth :" + deltaWidth);//                g.drawImage(resultingImage, (int) Math.round(deltaWidth / 2), (int) Math.round(deltaHeight / 2), null);//            }////            if (signature == QR_FOR_SEAL) {//                ImageIO.write(combined, "png", new File(fileOutput));//                LogSystem.info("Seal QR has been created ");//                return;//            }////            int QRsize = 1000;//            int ttdSize = 450;//            int ttdSizeW = 850;//            int hTTD = 0;//            int h_ttd = ttdImage.getHeight();//            int w_ttd = ttdImage.getWidth();//            int hText = 260;////            h_ttd = ttdSize;//            w_ttd = (int) (ttdImage.getWidth() * ((float) ttdSize / (float) ttdImage.getHeight()));////            if (w_ttd > ttdSizeW) {//                h_ttd = (int) (h_ttd * ((float) ttdSizeW / (float) w_ttd));//                w_ttd = ttdSizeW;//                hTTD = (ttdSize - h_ttd) / 2;//            }////            if (withSignature && qrOnly)//            {//                ImageIO.write(combined, "png", new File(fileOutput));//                LogSystem.info("Only QR success generated");//                return;//            }////            int padding = 30;//            int imageWidth = QRsize + ttdSizeW/2;//            BufferedImage combinedFinal = new BufferedImage(QRsize, imageWidth, BufferedImage.TYPE_INT_ARGB);//            Graphics2D g2 = (Graphics2D) combinedFinal.getGraphics();//            //			g2.setPaint(Color.WHITE);//            //		    g2.fillRect(0, 0, imageWidth, qrImage.getHeight());//            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);//            g2.drawImage(combined, 0, 0, QRsize, QRsize, null);////            Image ttdResize = ttdImage.getScaledInstance(w_ttd, h_ttd, Image.SCALE_SMOOTH);////            g2.drawImage(ttdResize, QRsize + padding, hTTD, w_ttd, h_ttd, null);//            int fontSize = 65;////            Font font = new Font(Font.SANS_SERIF, Font.PLAIN, fontSize);////            g2.setFont(font);//            g2.setPaint(Color.BLACK);//            int pText = 40;//            QRsize = QRsize + 90;////            String devel = ds.devel;////            String devel = "devel";//            if (devel != null && devel.equals("devel")) {//                String testingText = "[TESTING ONLY]";////                g2.drawString(testingText, center(testingText, qrImage.getWidth(), font), QRsize);//                QRsize += 64;//            }////            String titleTTD = "Ditandatangani Elektronik:";//            g2.drawString(titleTTD, center(titleTTD, qrImage.getWidth(), font), QRsize);////            List<String> namaLst = getNamaListNoQr(nama);//            for (String aa : namaLst) {//                LogSystem.info(aa);//            }//            int i = 0;////            for (i = 0; i < namaLst.size(); i++) {//                if (i >= 3) break;//                QRsize += 64;//                LogSystem.info("width " + qrImage.getWidth());//                LogSystem.info("length " + namaLst.get(i).length());//                float titleWidth = namaLst.get(i).length()/2 * fontSize;//                g2.drawString(namaLst.get(i), center(namaLst.get(i), qrImage.getWidth(), font), QRsize);//            }////            if (!withSignature)//            {//                QRsize += 64;//                SimpleDateFormat dt = new SimpleDateFormat("dd-MM-yyyy");//                SimpleDateFormat tm = new SimpleDateFormat("HH:mm:ss");//                String time = dt.format(dateSign)+" "+tm.format(dateSign)+ " WIB";//                g2.drawString(time, center(time, qrImage.getWidth(), font), QRsize);//            }//////            ImageIO.write(combinedFinal, "png", new File(fileOutput));////            LogSystem.info("Process QR done");//        } catch (Exception e) {//            LogSystem.error(e.toString());//            e.printStackTrace();//            throw e;//        }//    }    public static Dimension getScaledDimension(Dimension imgSize, Dimension boundary) {        int original_width = imgSize.width;        int original_height = imgSize.height;        int bound_width = boundary.width;        int bound_height = boundary.height;        int new_width = original_width;        int new_height = original_height;        // first check if we need to scale width        if (original_width > bound_width) {            //scale width to fit            new_width = bound_width;            //scale height to maintain aspect ratio            new_height = (new_width * original_height) / original_width;        }        // then check if we need to scale even with the new height        if (new_height > bound_height) {            //scale height to fit instead            new_height = bound_height;            //scale width to maintain aspect ratio            new_width = (new_height * original_width) / original_height;        }        if (original_width < bound_width || original_height < bound_height) {            // Only enlarge if the original image is smaller than the boundary            if (original_width < bound_width) {                new_width = bound_width;                new_height = (new_width * original_height) / original_width;            }            if (original_height < bound_height) {                new_height = bound_height;                new_width = (new_height * original_width) / original_height;            }        }        return new Dimension(new_width, new_height);    }    static List<String> getNamaList(String nama) {        int size = sizeText;        String namaS[] = nama.split(" ");        List<String> row = new ArrayList<>();        String rowText = "";        for (int i = 0; i < namaS.length; i++) {            String nmTxt = namaS[i];            if ((rowText.length() + nmTxt.length()) <= size) {                rowText += nmTxt + " ";                continue;            }            int spaceSz = size - rowText.length();            int szDiff = nmTxt.length() - spaceSz;            if ((nmTxt.length() - szDiff > 3) && szDiff > 3) {                rowText += nmTxt.substring(0, spaceSz);                row.add(rowText);                rowText = "";                rowText += nmTxt.substring(spaceSz) + " ";            } else {                row.add(rowText);                rowText = "";                rowText += nmTxt.substring(0) + " ";            }        }        row.add(rowText);        return row;    }    static List<String> getNamaListNoQr(String nama) {        int size = 16;        String namaS[] = nama.split(" ");        List<String> row = new ArrayList<>();        String rowText = "";        for (int i = 0; i < namaS.length; i++) {            String nmTxt = namaS[i];            if ((rowText.length() + nmTxt.length()) <= size) {                rowText += nmTxt + " ";                continue;            }            int spaceSz = size - rowText.length();            int szDiff = nmTxt.length() - spaceSz;            if ((nmTxt.length() - szDiff > 3) && szDiff > 3) {                rowText += nmTxt.substring(0, spaceSz);                row.add(rowText);                rowText = "";                rowText += nmTxt.substring(spaceSz) + " ";            } else {                row.add(rowText);                rowText = "";                rowText += nmTxt.substring(0) + " ";            }        }        row.add(rowText);        return row;    }    private int center(String text, int rectWidth, Font font)    {        FontRenderContext frc = new FontRenderContext(null, true, true);        Rectangle2D r2D = font.getStringBounds(text, frc);        int rWidth = (int) round(r2D.getWidth());        int rX = (int) round(r2D.getX());        int x = (rectWidth / 2) - (rWidth / 2) - rX;        return x;    }}